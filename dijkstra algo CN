import sys
total_vertex=9
def minimum_path(distance,sp_set):
    m=sys.maxsize
    m_index=-1
    for vx in range(total_vertex):
        if sp_set[vx]==False and distance[vx]<=m:
            m=distance[vx]
            m_index=vx
    return m_index
def print_solution(distance,n):
    print("the shotest distance between 0th node to all other nodes aer")
    for j in range(n):
        print("to",j,"the shortest distanve is",distance[j])
def dijkstra(graph,s):
    distance=[sys.maxsize]*total_vertex
    sp_set=[False]*total_vertex
    distance[s]=0
    for _ in range(total_vertex-1):
        u=minimum_path(distance,sp_set)
        sp_set[u]=True
        for v in range(total_vertex):
            if sp_set[v]==False and graph[u][v]!=-1 and distance[u]!=sys.maxsize and distance[u]+graph[u][v]<distance[v]:
                distance[v]=distance[u]+graph[u][v]
    print_solution(distance,total_vertex)
graph=[[1,2,3,4,5,6,-1,5,4,3],
      [-1,-4,3,3,5,6,4,4,4,3],
      [-2,-1,4,5,3,6,7,6,5,1],
      [1,2,3,4,5,6,7,8,9,1],
      [-1,-2,-3,-4,-5,-6,-7,-8,-1,-2],
      [-1,-1,-1,-1,-1,-1,-1,-1,2,3],
      [9,8,7,6,5,4,3,2,1,3],
      [1,2,3,4,6,7,8,9,3,2],
      [1,2,3,4,5,6,7,8,1,2],
      [-1,-1,-1,-1,-2,-3,4,-5,3,2]]
      
      
dijkstra(graph,0)
